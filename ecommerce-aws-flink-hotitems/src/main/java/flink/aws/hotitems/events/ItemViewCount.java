/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package flink.aws.hotitems.events;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ItemViewCount extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 688438594385965832L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ItemViewCount\",\"namespace\":\"flink.aws.hotitems.events\",\"fields\":[{\"name\":\"itemid\",\"type\":\"long\"},{\"name\":\"windowend\",\"type\":\"long\"},{\"name\":\"count\",\"type\":\"long\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ItemViewCount> ENCODER =
      new BinaryMessageEncoder<ItemViewCount>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ItemViewCount> DECODER =
      new BinaryMessageDecoder<ItemViewCount>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<ItemViewCount> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<ItemViewCount> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ItemViewCount>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this ItemViewCount to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a ItemViewCount from a ByteBuffer. */
  public static ItemViewCount fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public long itemid;
  @Deprecated public long windowend;
  @Deprecated public long count;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ItemViewCount() {}

  /**
   * All-args constructor.
   * @param itemid The new value for itemid
   * @param windowend The new value for windowend
   * @param count The new value for count
   */
  public ItemViewCount(java.lang.Long itemid, java.lang.Long windowend, java.lang.Long count) {
    this.itemid = itemid;
    this.windowend = windowend;
    this.count = count;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return itemid;
    case 1: return windowend;
    case 2: return count;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: itemid = (java.lang.Long)value$; break;
    case 1: windowend = (java.lang.Long)value$; break;
    case 2: count = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'itemid' field.
   * @return The value of the 'itemid' field.
   */
  public java.lang.Long getItemid() {
    return itemid;
  }

  /**
   * Sets the value of the 'itemid' field.
   * @param value the value to set.
   */
  public void setItemid(java.lang.Long value) {
    this.itemid = value;
  }

  /**
   * Gets the value of the 'windowend' field.
   * @return The value of the 'windowend' field.
   */
  public java.lang.Long getWindowend() {
    return windowend;
  }

  /**
   * Sets the value of the 'windowend' field.
   * @param value the value to set.
   */
  public void setWindowend(java.lang.Long value) {
    this.windowend = value;
  }

  /**
   * Gets the value of the 'count' field.
   * @return The value of the 'count' field.
   */
  public java.lang.Long getCount() {
    return count;
  }

  /**
   * Sets the value of the 'count' field.
   * @param value the value to set.
   */
  public void setCount(java.lang.Long value) {
    this.count = value;
  }

  /**
   * Creates a new ItemViewCount RecordBuilder.
   * @return A new ItemViewCount RecordBuilder
   */
  public static flink.aws.hotitems.events.ItemViewCount.Builder newBuilder() {
    return new flink.aws.hotitems.events.ItemViewCount.Builder();
  }

  /**
   * Creates a new ItemViewCount RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ItemViewCount RecordBuilder
   */
  public static flink.aws.hotitems.events.ItemViewCount.Builder newBuilder(flink.aws.hotitems.events.ItemViewCount.Builder other) {
    return new flink.aws.hotitems.events.ItemViewCount.Builder(other);
  }

  /**
   * Creates a new ItemViewCount RecordBuilder by copying an existing ItemViewCount instance.
   * @param other The existing instance to copy.
   * @return A new ItemViewCount RecordBuilder
   */
  public static flink.aws.hotitems.events.ItemViewCount.Builder newBuilder(flink.aws.hotitems.events.ItemViewCount other) {
    return new flink.aws.hotitems.events.ItemViewCount.Builder(other);
  }

  /**
   * RecordBuilder for ItemViewCount instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ItemViewCount>
    implements org.apache.avro.data.RecordBuilder<ItemViewCount> {

    private long itemid;
    private long windowend;
    private long count;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(flink.aws.hotitems.events.ItemViewCount.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.itemid)) {
        this.itemid = data().deepCopy(fields()[0].schema(), other.itemid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.windowend)) {
        this.windowend = data().deepCopy(fields()[1].schema(), other.windowend);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.count)) {
        this.count = data().deepCopy(fields()[2].schema(), other.count);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing ItemViewCount instance
     * @param other The existing instance to copy.
     */
    private Builder(flink.aws.hotitems.events.ItemViewCount other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.itemid)) {
        this.itemid = data().deepCopy(fields()[0].schema(), other.itemid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.windowend)) {
        this.windowend = data().deepCopy(fields()[1].schema(), other.windowend);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.count)) {
        this.count = data().deepCopy(fields()[2].schema(), other.count);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'itemid' field.
      * @return The value.
      */
    public java.lang.Long getItemid() {
      return itemid;
    }

    /**
      * Sets the value of the 'itemid' field.
      * @param value The value of 'itemid'.
      * @return This builder.
      */
    public flink.aws.hotitems.events.ItemViewCount.Builder setItemid(long value) {
      validate(fields()[0], value);
      this.itemid = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'itemid' field has been set.
      * @return True if the 'itemid' field has been set, false otherwise.
      */
    public boolean hasItemid() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'itemid' field.
      * @return This builder.
      */
    public flink.aws.hotitems.events.ItemViewCount.Builder clearItemid() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'windowend' field.
      * @return The value.
      */
    public java.lang.Long getWindowend() {
      return windowend;
    }

    /**
      * Sets the value of the 'windowend' field.
      * @param value The value of 'windowend'.
      * @return This builder.
      */
    public flink.aws.hotitems.events.ItemViewCount.Builder setWindowend(long value) {
      validate(fields()[1], value);
      this.windowend = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'windowend' field has been set.
      * @return True if the 'windowend' field has been set, false otherwise.
      */
    public boolean hasWindowend() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'windowend' field.
      * @return This builder.
      */
    public flink.aws.hotitems.events.ItemViewCount.Builder clearWindowend() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'count' field.
      * @return The value.
      */
    public java.lang.Long getCount() {
      return count;
    }

    /**
      * Sets the value of the 'count' field.
      * @param value The value of 'count'.
      * @return This builder.
      */
    public flink.aws.hotitems.events.ItemViewCount.Builder setCount(long value) {
      validate(fields()[2], value);
      this.count = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'count' field has been set.
      * @return True if the 'count' field has been set, false otherwise.
      */
    public boolean hasCount() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'count' field.
      * @return This builder.
      */
    public flink.aws.hotitems.events.ItemViewCount.Builder clearCount() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ItemViewCount build() {
      try {
        ItemViewCount record = new ItemViewCount();
        record.itemid = fieldSetFlags()[0] ? this.itemid : (java.lang.Long) defaultValue(fields()[0]);
        record.windowend = fieldSetFlags()[1] ? this.windowend : (java.lang.Long) defaultValue(fields()[1]);
        record.count = fieldSetFlags()[2] ? this.count : (java.lang.Long) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ItemViewCount>
    WRITER$ = (org.apache.avro.io.DatumWriter<ItemViewCount>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ItemViewCount>
    READER$ = (org.apache.avro.io.DatumReader<ItemViewCount>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
